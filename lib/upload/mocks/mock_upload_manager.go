// Code generated by MockGen. DO NOT EDIT.
// Source: eeptorrent/lib/upload (interfaces: UploadManagerInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_upload_manager.go -package=mocks eeptorrent/lib/upload UploadManagerInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	peerprotocol "github.com/go-i2p/go-i2p-bt/peerprotocol"
	gomock "go.uber.org/mock/gomock"
)

// MockUploadManagerInterface is a mock of UploadManagerInterface interface.
type MockUploadManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUploadManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockUploadManagerInterfaceMockRecorder is the mock recorder for MockUploadManagerInterface.
type MockUploadManagerInterfaceMockRecorder struct {
	mock *MockUploadManagerInterface
}

// NewMockUploadManagerInterface creates a new mock instance.
func NewMockUploadManagerInterface(ctrl *gomock.Controller) *MockUploadManagerInterface {
	mock := &MockUploadManagerInterface{ctrl: ctrl}
	mock.recorder = &MockUploadManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadManagerInterface) EXPECT() *MockUploadManagerInterfaceMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockUploadManagerInterface) AddPeer(peer *peerprotocol.PeerConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", peer)
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockUploadManagerInterfaceMockRecorder) AddPeer(peer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockUploadManagerInterface)(nil).AddPeer), peer)
}

// GetBlock mocks base method.
func (m *MockUploadManagerInterface) GetBlock(pieceIndex, offset, length uint32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", pieceIndex, offset, length)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockUploadManagerInterfaceMockRecorder) GetBlock(pieceIndex, offset, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockUploadManagerInterface)(nil).GetBlock), pieceIndex, offset, length)
}

// GetUploadStats mocks base method.
func (m *MockUploadManagerInterface) GetUploadStats() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadStats")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetUploadStats indicates an expected call of GetUploadStats.
func (mr *MockUploadManagerInterfaceMockRecorder) GetUploadStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadStats", reflect.TypeOf((*MockUploadManagerInterface)(nil).GetUploadStats))
}

// RemovePeer mocks base method.
func (m *MockUploadManagerInterface) RemovePeer(peer *peerprotocol.PeerConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePeer", peer)
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockUploadManagerInterfaceMockRecorder) RemovePeer(peer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockUploadManagerInterface)(nil).RemovePeer), peer)
}

// Serve mocks base method.
func (m *MockUploadManagerInterface) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve.
func (mr *MockUploadManagerInterfaceMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockUploadManagerInterface)(nil).Serve))
}

// Shutdown mocks base method.
func (m *MockUploadManagerInterface) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockUploadManagerInterfaceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockUploadManagerInterface)(nil).Shutdown))
}

// VerifyPiece mocks base method.
func (m *MockUploadManagerInterface) VerifyPiece(index uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPiece", index)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPiece indicates an expected call of VerifyPiece.
func (mr *MockUploadManagerInterfaceMockRecorder) VerifyPiece(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPiece", reflect.TypeOf((*MockUploadManagerInterface)(nil).VerifyPiece), index)
}
